{"version":3,"file":"static/js/617.93b6d88b.chunk.js","mappings":"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","sources":["Components/ExperienceComponent/ExperienceModal.js","Hooks/CustomExperienceHooks/useDeleteExperience.js","Components/ExperienceComponent/ExperienceCard.js","Components/ExperienceComponent/ExperiencePage.js","Hooks/CustomExperienceHooks/useGetExperience.js","Utils/Formatter.js"],"sourcesContent":["import React, { lazy, useState, Suspense } from \"react\";\r\nimport {\r\n  Button,\r\n  Modal,\r\n  ModalBody,\r\n  ModalCloseButton,\r\n  ModalContent,\r\n  ModalFooter,\r\n  ModalHeader,\r\n  Spinner,\r\n  Tooltip,\r\n  useDisclosure,\r\n} from \"@chakra-ui/react\";\r\nimport { MdDarkMode } from \"react-icons/md\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { MdOutlineLightMode } from \"react-icons/md\";\r\n\r\nimport ProfileCardLogos from \"../../Data/DashboardData/ProfileCardLogo.js\";\r\nimport { FcPlus } from \"react-icons/fc\";\r\n\r\nconst ExperienceModal = ({ type, experiencState }) => {\r\n  const { isOpen, onOpen, onClose } = useDisclosure(); //modal use\r\n  const ExperienceModalBody = React.lazy(() =>\r\n    import(\"../ModalBodys/ExperienceModalBody.js\")\r\n  );\r\n  const [updateClicked, setUpdateClicked] = useState(false);\r\n  const [createClicked, setCreateClicked] = useState(false);\r\n\r\n  //theme use\r\n  const currentMode = useSelector((state) => state.themes.currentPalette);\r\n  const currentPalette = useSelector(\r\n    (state) => state.themes.palettes[state.themes.currentPalette]\r\n  );\r\n  const [Mode, setMode] = useState(currentMode);\r\n  const [timeoutId, setTimeoutId] = useState(null);\r\n\r\n  //isLoading\r\n\r\n  const handleModalBg = () => {\r\n    if (currentMode === \"light\" || Mode === \"light\") {\r\n      setMode(\"dark\");\r\n    } else {\r\n      setMode(\"light\");\r\n    }\r\n  };\r\n  const handleCreate = () => {\r\n    setCreateClicked(true);\r\n    if (timeoutId) {\r\n      clearTimeout(timeoutId);\r\n    }\r\n    const newTimeoutId = setTimeout(() => {\r\n      onClose();\r\n      setTimeoutId(null);\r\n    }, 100);\r\n  };\r\n  const handleUpdate = () => {\r\n    setUpdateClicked(true);\r\n    if (timeoutId) {\r\n      clearTimeout(timeoutId);\r\n    }\r\n\r\n    const newTimeoutId = setTimeout(() => {\r\n      onClose();\r\n      setTimeoutId(null);\r\n    }, 100);\r\n  };\r\n  return (\r\n    <div className=\"sub-topics gap-2 flex justify-center items-center \">\r\n      {type === \"create\" ? (\r\n        <Tooltip label=\"Edit\">\r\n          <button\r\n            type=\"button\"\r\n            onClick={() => {\r\n              onOpen();\r\n            }}\r\n            style={{ backgroundColor: currentPalette.accent }}\r\n            className=\"  p-1 rounded-md lg:px-4 px-2 font-semibold uppercase gap-3 flex items-center justify-center cursor-pointer transition duration-300 transform hover:scale-105\"\r\n          >\r\n            <span className=\"text-white text-sm lg:text-lg \"> Add </span>\r\n            <FcPlus />\r\n          </button>\r\n        </Tooltip>\r\n      ) : (\r\n        <Tooltip label=\"Update\">\r\n          <Button\r\n            size=\"sm\"\r\n            type=\"button\"\r\n            onClick={() => {\r\n              onOpen();\r\n            }}\r\n            className=\"  rounded-lg font-bold uppercase gap-3 flex items-center justify-center cursor-pointer transition duration-300 transform hover:scale-105\"\r\n          >\r\n            {ProfileCardLogos.edit}\r\n          </Button>\r\n        </Tooltip>\r\n      )}\r\n\r\n      <Modal\r\n        colorScheme={currentPalette.colorScheme}\r\n        scrollBehavior=\"inside\"\r\n        size=\"xl\"\r\n        isCentered\r\n        isOpen={isOpen}\r\n        onClose={onClose}\r\n      >\r\n        <ModalContent\r\n          borderRadius=\"1rem\"\r\n          backgroundColor={`${Mode === \"dark\" ? \"#293645\" : \"white\"}`}\r\n          color={`${Mode === \"dark\" ? \"white\" : \"black\"}`}\r\n        >\r\n          <ModalHeader textTransform=\"capitalize\">\r\n            <div className=\"flex justify-between pe-9 items-center\">\r\n              {type === \"create\" ? \"Add experience\" : \"Update Experience\"}\r\n              <Button size=\"xs\" onClick={handleModalBg}>\r\n                {Mode === \"dark\" ? <MdDarkMode /> : <MdOutlineLightMode />}\r\n              </Button>\r\n            </div>\r\n          </ModalHeader>\r\n          <ModalCloseButton />\r\n          <ModalBody>\r\n            <Suspense\r\n              fallback={\r\n                <div className=\"flex justify-center h-full \">\r\n                  <Spinner />\r\n                </div>\r\n              }\r\n            >\r\n              <ExperienceModalBody\r\n                updateClicked={updateClicked}\r\n                setUpdateClicked={setUpdateClicked}\r\n                setCreateClicked={setCreateClicked}\r\n                createClicked={createClicked}\r\n                experienceState={experiencState}\r\n              />\r\n            </Suspense>\r\n          </ModalBody>\r\n          <ModalFooter>\r\n            {type === \"create\" ? (\r\n              <Button\r\n                size=\"sm\"\r\n                // isLoading={createLoading}\r\n                loadingText=\"Saving\"\r\n                onClick={handleCreate}\r\n                colorScheme={currentPalette.colorScheme}\r\n              >\r\n                Create\r\n              </Button>\r\n            ) : (\r\n              <Button\r\n                size=\"sm\"\r\n                // isLoading={updateLoading}\r\n                loadingText=\"Updating\"\r\n                onClick={handleUpdate}\r\n                colorScheme={currentPalette.colorScheme}\r\n              >\r\n                Update\r\n              </Button>\r\n            )}\r\n          </ModalFooter>\r\n        </ModalContent>\r\n      </Modal>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ExperienceModal;\r\n","import axios from \"axios\";\r\nimport toast from \"react-hot-toast\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport useGetExperience from \"./useGetExperience\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { setIsExperienceDeleting } from \"../../Redux/Slices/ExperienceSlice\";\r\n\r\nconst useDeleteExperience = () => {\r\n  const navigate = useNavigate();\r\n  const { getExperience } = useGetExperience();\r\n  const dispatch = useDispatch();\r\n  const deleteExperience = async (eid) => {\r\n    try {\r\n      dispatch(setIsExperienceDeleting(true));\r\n      if (!eid) {\r\n        throw new Error(\"Please Provide ID\");\r\n      }\r\n      const user = JSON.parse(localStorage.getItem(\"user\"));\r\n      const token = JSON.parse(localStorage.getItem(\"jwt_Token\"));\r\n      const uid = user?.userId;\r\n      if (!token || !uid) {\r\n        navigate(\"/\");\r\n        return toast.error(\"Please Log In\", { position: \"bottom-left\" });\r\n      }\r\n\r\n      const { data } = await axios.delete(\r\n        `${process.env.REACT_APP_BACKEND_ORIGIN}/api/experience/${uid}/delete/${eid}`,\r\n        {\r\n          headers: { Authorization: token },\r\n        }\r\n      );\r\n\r\n      if (data.success) {\r\n        toast.success(data.message, { position: \"bottom-left\" });\r\n        getExperience();\r\n      }\r\n    } catch (error) {\r\n      toast.error(\"Something went wrong\", { position: \"bottom-left\" });\r\n    } finally {\r\n      dispatch(setIsExperienceDeleting(false));\r\n    }\r\n  };\r\n\r\n  return {\r\n    deleteExperience,\r\n  };\r\n};\r\n\r\nexport default useDeleteExperience;\r\n","import React, { useState } from \"react\";\r\nimport { formatDate } from \"../../Utils/Formatter\";\r\nimport { Badge, Button, Tooltip } from \"@chakra-ui/react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { FaCopy, FaRegCopy } from \"react-icons/fa\";\r\nimport { MdDeleteOutline } from \"react-icons/md\";\r\nimport ExperienceModal from \"./ExperienceModal\";\r\nimport toast from \"react-hot-toast\";\r\nimport useDeleteExperience from \"../../Hooks/CustomExperienceHooks/useDeleteExperience\";\r\nimport { FcApproval } from \"react-icons/fc\";\r\n\r\nconst ExperienceCard = ({ data }) => {\r\n  const startDate = formatDate(data.startDate);\r\n  const endDate = formatDate(data.endDate);\r\n  const [copied, setCopied] = useState(false);\r\n  const { deleteExperience } = useDeleteExperience();\r\n  const currentPalette = useSelector(\r\n    (state) => state.themes.palettes[state.themes.currentPalette]\r\n  );\r\n\r\n  const handleCopy = () => {\r\n    setCopied(true);\r\n    const textToCopy = `Company: ${data.company},Role:${\r\n      data.role\r\n    } From : ${startDate}- ${endDate}, Description: ${\r\n      data.description\r\n    } skills Used : ${data.skillsUsed.map((data) => {\r\n      return data;\r\n    })}`;\r\n    navigator.clipboard\r\n      .writeText(textToCopy)\r\n      .then(() => {\r\n        toast.success(\"Task Copied\", { position: \"bottom-left\" });\r\n        const timeoutId = setTimeout(() => setCopied(false), 2000);\r\n        return () => clearTimeout(timeoutId);\r\n      })\r\n      .catch((error) => {\r\n        console.error(\"Failed to copy text:\", error);\r\n      });\r\n  };\r\n  const handleDelete = () => {\r\n    deleteExperience(data._id);\r\n  };\r\n  return (\r\n    <div\r\n      className=\"h-80  p-2 lg:w-96 w-full  shadow-2xl rounded-xl\"\r\n      style={{ backgroundColor: currentPalette.primary }}\r\n    >\r\n      <div className=\"flex px-2 py-1 justify-between items-center\">\r\n        <span className=\"font-semibold text-lg uppercase\">{data.company}</span>\r\n\r\n        <div className=\"flex gap-1    justify-start items-center\">\r\n          <Tooltip label=\"Delete\">\r\n            <Button\r\n              size=\"sm\"\r\n              // isLoading={deleteLoading}\r\n              onClick={handleDelete}\r\n              color=\"red\"\r\n            >\r\n              <MdDeleteOutline className=\"\" />\r\n            </Button>\r\n          </Tooltip>\r\n          <Tooltip label={copied ? \"Copied!\" : \"Copy\"}>\r\n            <Button size=\"sm\" onClick={handleCopy}>\r\n              {copied ? <FaCopy /> : <FaRegCopy />}\r\n            </Button>\r\n          </Tooltip>\r\n          <ExperienceModal type=\"update\" experiencState={data} />\r\n        </div>\r\n      </div>\r\n      <hr />\r\n      <div className=\"flex p-2 gap-2 flex-col\">\r\n        <div className=\"flex justify-between items-center  \">\r\n          <div className=\"flex gap-1 items-center\">\r\n            <span className=\"font-semibold  capitalize text-md\">\r\n              {\" \"}\r\n              {data.role.substring(0, 20)}\r\n            </span>\r\n\r\n            <FcApproval />\r\n          </div>\r\n          <span className=\"text-xs\">\r\n            {startDate} - {endDate}\r\n          </span>\r\n        </div>\r\n        <div className=\"flex justify-start \">\r\n          {\" \"}\r\n          <Badge fontSize=\"xx-small\">Description</Badge>\r\n        </div>\r\n\r\n        <div\r\n          className=\"p-2 rounded-md shadow-inner overflow-hidden h-32\"\r\n          style={{ backgroundColor: currentPalette.accent, overflowY: \"auto\" }}\r\n        >\r\n          <p\r\n            className=\"text-sm\"\r\n            style={{\r\n              scrollbarWidth: \"none\",\r\n              msOverflowStyle: \"none\",\r\n              overflow: \"hidden\",\r\n            }}\r\n          >\r\n            {data.description}\r\n          </p>\r\n        </div>\r\n        <hr />\r\n        <div className=\"flex flex-col   \">\r\n          <div className=\"flex justify-start\">\r\n            <b className=\"text-sm\">Skills Used</b>\r\n          </div>\r\n          <div className=\"flex items-center  flex-wrap py-2 gap-2 px-4 \">\r\n            {data?.skillsUsed.length === 0 && (\r\n              <div className=\"text-center\">No Data Found</div>\r\n            )}\r\n            {data?.skillsUsed.map((data, i) => {\r\n              return (\r\n                <Badge fontSize=\"x-small\" key={i}>\r\n                  {data}\r\n                </Badge>\r\n              );\r\n            })}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ExperienceCard;\r\n","import React, { useEffect } from \"react\";\r\nimport Layout from \"../../Layout/Layout\";\r\nimport MainHeader from \"../DashBoardComponents/MainHeader\";\r\nimport SideBar from \"../DashBoardComponents/SideBar\";\r\nimport { useSelector } from \"react-redux\";\r\nimport Navigation from \"../ResuableComponent/Navigation\";\r\nimport ProfessionalInfoModal from \"./ExperienceModal\";\r\nimport useGetExperience from \"../../Hooks/CustomExperienceHooks/useGetExperience\";\r\nimport ExperienceCard from \"./ExperienceCard\";\r\nimport { Badge } from \"@chakra-ui/react\";\r\nimport EmptyList from \"../DashBoardComponents/EmptyList\";\r\n\r\nconst ExperiencePage = () => {\r\n  const currentPalette = useSelector(\r\n    (state) => state.themes.palettes[state.themes.currentPalette]\r\n  );\r\n  const { getExperience } = useGetExperience();\r\n  const allExperience = useSelector((store) => store.experience.allExperience);\r\n\r\n  useEffect(() => {\r\n    getExperience();\r\n  }, []);\r\n  return (\r\n    <Layout\r\n      title=\"Experience  Page\"\r\n      keywords=\"Experience, compony, role, info,data,seo,\"\r\n    >\r\n      <div\r\n        style={{ backgroundColor: currentPalette.secondary }}\r\n        className=\"grid grid-cols-12 text-white min-h-svh\"\r\n      >\r\n        <SideBar />\r\n        <div className=\"col-span-11 lg:p-3 w-screen md:w-full  lg:w-full  \">\r\n          <MainHeader />\r\n          <div className=\"lg:p-3 p-1   w-full\">\r\n            <div className=\"flex justify-between rounded-2xl items-center lg:px-12 px-1\">\r\n              <ProfessionalInfoModal type=\"create\" />\r\n\r\n              <Navigation size=\"4\" />\r\n            </div>\r\n          </div>\r\n          <span className=\"text-xs ps-6\">\r\n            {\" \"}\r\n            Experiences ({allExperience?.length || 0})\r\n          </span>\r\n          <div className=\"lg:p-3 p-2 w-full flex flex-wrap gap-2 lg:gap-5 items-center justify-evenly\">\r\n            {allExperience.length === 0 ? (\r\n              <EmptyList message=\"No Experience Found\" />\r\n            ) : (\r\n              <>\r\n                {\" \"}\r\n                {allExperience\r\n                  .slice()\r\n                  .reverse()\r\n                  .map((data) => {\r\n                    return <ExperienceCard key={data._id} data={data} />;\r\n                  })}\r\n              </>\r\n            )}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </Layout>\r\n  );\r\n};\r\n\r\nexport default ExperiencePage;\r\n","import axios from \"axios\";\r\nimport toast from \"react-hot-toast\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { setAllExperience } from \"../../Redux/Slices/ExperienceSlice\";\r\n\r\nconst useGetExperience = () => {\r\n  const navigate = useNavigate();\r\n  const dispatch = useDispatch();\r\n  const getExperience = async () => {\r\n    try {\r\n      const token = JSON.parse(localStorage.getItem(\"jwt_Token\"));\r\n      const user = JSON.parse(localStorage.getItem(\"user\"));\r\n      const uid = user?.userId;\r\n      if (!token || !uid) {\r\n        navigate(\"/\");\r\n        return toast.error(\"Please Log In\");\r\n      }\r\n\r\n      const { data } = await axios.get(\r\n        `${process.env.REACT_APP_BACKEND_ORIGIN}/api/experience/${uid}`,\r\n        { headers: { Authorization: token } }\r\n      );\r\n      if (data.success) {\r\n        dispatch(setAllExperience(data.allExperiences));\r\n      }\r\n    } catch (error) {\r\n      toast.error(\"Something went wrong\", { position: \"bottom-left\" });\r\n    }\r\n  };\r\n\r\n  return {\r\n    getExperience,\r\n  };\r\n};\r\n\r\nexport default useGetExperience;\r\n","export const formatDate = (dateString) => {\r\n  const date = new Date(dateString);\r\n  const options = { day: \"2-digit\", month: \"short\", year: \"2-digit\" };\r\n  const formattedDate = date.toLocaleDateString(\"en-US\", options);\r\n  const [month, day, year] = formattedDate.split(\" \");\r\n  return `${day}${month}-${year}`;\r\n};\r\n"],"names":["_ref","type","experiencState","isOpen","onOpen","onClose","useDisclosure","ExperienceModalBody","React","updateClicked","setUpdateClicked","useState","createClicked","setCreateClicked","currentMode","useSelector","state","themes","currentPalette","palettes","Mode","setMode","timeoutId","setTimeoutId","_jsxs","className","children","_jsx","Tooltip","label","onClick","style","backgroundColor","accent","FcPlus","Button","size","ProfileCardLogos","edit","Modal","colorScheme","scrollBehavior","isCentered","ModalContent","borderRadius","concat","color","ModalHeader","textTransform","handleModalBg","MdDarkMode","MdOutlineLightMode","ModalCloseButton","ModalBody","Suspense","fallback","Spinner","experienceState","ModalFooter","loadingText","handleCreate","clearTimeout","setTimeout","handleUpdate","useDeleteExperience","navigate","useNavigate","getExperience","useGetExperience","dispatch","useDispatch","deleteExperience","async","setIsExperienceDeleting","eid","Error","user","JSON","parse","localStorage","getItem","token","uid","userId","toast","error","position","data","axios","delete","process","headers","Authorization","success","message","startDate","formatDate","endDate","copied","setCopied","primary","company","handleDelete","_id","MdDeleteOutline","handleCopy","textToCopy","role","description","skillsUsed","map","navigator","clipboard","writeText","then","catch","console","FaCopy","FaRegCopy","ExperienceModal","substring","FcApproval","Badge","fontSize","overflowY","scrollbarWidth","msOverflowStyle","overflow","length","i","ExperiencePage","allExperience","store","experience","useEffect","Layout","title","keywords","secondary","SideBar","MainHeader","ProfessionalInfoModal","Navigation","EmptyList","_Fragment","slice","reverse","ExperienceCard","get","setAllExperience","allExperiences","dateString","formattedDate","Date","toLocaleDateString","day","month","year","split"],"sourceRoot":""}